import os
os.chdir(os.path.dirname(os.path.abspath(__file__)))

import streamlit as st
from streamlit_option_menu import option_menu
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from PIL import Image

# Paths
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_PATH = os.path.join(BASE_DIR, "data", "cleaned_fish_shellfish_dataset.csv")
PRICE_MODEL_PATH = os.path.join(BASE_DIR, "models", "price_model.pkl")
PROFIT_MODEL_PATH = os.path.join(BASE_DIR, "models", "profit_model.pkl")
CLASSIFIER_MODEL_PATH = os.path.join(BASE_DIR, "models", "profit_classifier.pkl")

# Load data
df = pd.read_csv(DATA_PATH)
logo = Image.open('media/logo.png')

# Page config
st.set_page_config(
    page_title="Fiskerikajens dashboard",
    page_icon="üêü",
    layout="wide",
    initial_sidebar_state="expanded",
)


with st.sidebar:
    selected = option_menu(
        "Menu",
        ["Forside", "Estimere pris og profit", "Profitabilitet af Produkter", "Vurderet indtjeningspotentiale", "Transportomkostninger", "V√¶gtpris over tid"],
        icons=["info-circle", "currency-dollar", "bar-chart", "activity", "truck", "bell"],
        menu_icon="cast",
        default_index=0,
    )


st.image(logo, width=200)

# Helper for user input
def get_user_input(include_year=True):
    weight = st.number_input("V√¶gt (g)", min_value=0.0, value=500.0)
    freight = st.number_input("Transportomkostning (kr)", min_value=0.0, value=10.0)
    if include_year:
        year = st.selectbox("√Ör", sorted(df["year"].unique()))
    else:
        year = None    
    season = st.selectbox("S√¶son", ["Sommer", "For√•r", "Efter√•r", "Vinter"])

    season_data = {
        "season_availability_Summer": 1 if season == "Sommer" else 0,
        "season_availability_Spring": 1 if season == "For√•r" else 0,
        "season_availability_Autumn": 1 if season == "Efter√•r" else 0,
        "season_availability_Winter": 1 if season == "Vinter" else 0,
    }

    input_df = pd.DataFrame([{ 
        "weight_g": weight,
        "freight_charge_kr": freight,
        "season_availability_Summer": season_data["season_availability_Summer"],
        "season_availability_Spring": season_data["season_availability_Spring"],
        "season_availability_Autumn": season_data["season_availability_Autumn"],
        "season_availability_Winter": season_data["season_availability_Winter"],
        "year": year
    }])
    
    if include_year:
        input_df["year"] = year

    return input_df

if selected == "Forside":
    st.markdown("""
    <body style="background-color:yellow;">
        <div style="background-color:#095c37 ;padding:10px">
            <h2 style="color:white;text-align:center;">Velkommen til Fiskerikajens dashboard</h2>
        </div>
    </body>
    """, unsafe_allow_html=True)

    st.markdown("""
    Dette dashboard er udviklet med form√•let om at give Fiskerikajen datadrevet indsigt i, hvordan pris og profit p√• fiske- og skaldyrsprodukter p√•virkes af n√∏glefaktorer som v√¶gt, s√¶son og transportomkostninger. 
    Med udgangspunkt i en machine learning-model (linear regression) kan dashboardet: 
    * Estimere pris og profit baseret p√• produktets egenskaber (v√¶gt, √•r, s√¶son og fragtomkostning). 
    * Identificere de mest profitable produkter pr. s√¶son og √•r. 
    * Analysere sammenh√¶ngen mellem fragtomkostninger og pris over tid. 
    * Vise hvordan v√¶gten p√•virker priss√¶tningen p√• tv√¶rs af forskellige √•r og produkttyper.

    Brug dashboardet som et v√¶rkt√∏j til at tr√¶ffe  datadrevne beslutninger omkring indk√∏b og priss√¶tning.
    """)

elif selected == "Estimere pris og profit":
    st.info("""
**Hvad er form√•let?**  
    Denne model bruger regressionsalgoritmer til at forudsige b√•de pris og profit baseret p√• oplysninger som v√¶gt, √•rstal, s√¶son og transportomkostninger.  
Ved at indtaste disse v√¶rdier, kan du f√• et estimat p√• hvad produktet b√∏r koste ‚Äì og hvor meget profit det kan give.  
Modellen er tr√¶net p√• historiske data fra Fiskerikajen og giver dermed et datadrevet grundlag for bedre beslutninger i indk√∏b og priss√¶tning.
""")
    st.title(" Estim√©r pris og profit")
    st.markdown("Indtast oplysninger om et fiske- eller skaldyrsprodukt for at forudsige pris og profit:")

    input_df = get_user_input()
    price_model = joblib.load(PRICE_MODEL_PATH)
    profit_model = joblib.load(PROFIT_MODEL_PATH)

    if st.button(" Forudsig pris og profit"):
        pred_price = float(price_model.predict(input_df)[0])
        pred_profit = float(profit_model.predict(input_df)[0])
        st.success(f"üîπ Forventet pris: **{pred_price:.2f} kr**")
        st.success(f"üîπ Forventet profit: **{pred_profit:.2f} kr**")

elif selected == "Vurderet indtjeningspotentiale":
    st.title("üîç Vurder indtjeningsniveau for et produkt")
    st.info("""
**Hvad er form√•let?**  
Denne model vurderer, om et fiske- eller skaldyrsprodukt forventes at give **lav**, **mellem** eller **h√∏j** profit.  
Det baseres p√• v√¶gt, transportomkostning, s√¶son og type ‚Äì og giver et hurtigt overblik over, hvor profitabelt produktet sandsynligvis vil v√¶re.
""")
    type_choice = st.selectbox("Type", ["Fisk", "Skaldyr"])
    type_data = {
        "type_fish": 1 if type_choice == "Fisk" else 0,
        "type_shellfish": 1 if type_choice == "Skaldyr" else 0
    }
    input_df = get_user_input(include_year=False)
    input_df["type_fish"] = type_data["type_fish"]
    input_df["type_shellfish"] = type_data["type_shellfish"]
    input_df = input_df.drop(columns=["year"])
# Reorder columns to match training input for classifier
    season_columns = [
    "season_availability_Summer",
    "season_availability_Spring",
    "season_availability_Autumn",
    "season_availability_Winter",
]
    classifier_input = input_df[[
    "weight_g",
        "freight_charge_kr",
        "type_fish",
        "type_shellfish"
] +  season_columns]

    

    clf_model = joblib.load(CLASSIFIER_MODEL_PATH)
    prediction = clf_model.predict(classifier_input)[0]

    if st.button("üîç Forudsig profitkategori"):
        prediction = clf_model.predict(classifier_input)[0]
        st.success(f"üîπ Forventet indtjeningsniveau: **{prediction}**")
    

    
if selected == "Profitabilitet af Produkter":
    
    name_cols = [col for col in df.columns if col.startswith("name_")]
    df['name'] = df[name_cols].idxmax(axis=1).str.replace("name_", "")

    view_option = st.radio("V√¶lg visning", ["Diagram profit pr. √•r","Diagram profit pr. s√¶son","S√¶son", "√Ör"], horizontal=True)

    if view_option =="Diagram profit pr. √•r":
        st.image("media/profit_by_year_boxplot.png", caption="Oversigt over profit fordelt p√• √•r", width=800)
        st.markdown("""
                    Dette boksplot viser fordelingen af profit (kr) for fiske- og skaldyrsprodukter i √•rene 2020 til 2024. 
                    Medianen for profit ligger nogenlunde ens hvert √•r, hvilket tyder p√•, at indtjeningen generelt har v√¶ret stabil over tid.
                    Variationen i profit er ogs√• nogenlunde ens hvert √•r, hvilket viser, at indtjening ikke har √¶ndret sig markant.
                    Der er dog enkelte afvigelser:
                    * I 2024 og 2022 ses nogle meget lave v√¶rdier.
                    * I 2023 ses flere produkter med h√∏j profit.
                    * I 2020 er der lidt flere produkter med lav indtjening end de andre √•r.
                    Alt i alt viser grafen, at profitniveauet har v√¶ret stabilt, selvom der indimellem forekommer ekstreme v√¶rdier.
                    """)
    if view_option =="Diagram profit pr. s√¶son":
        
        st.image("media/profit_by_season_boxplot.png", caption="Oversigt over profit fordelt p√• √•r",  width=800)
        st.markdown(""" 
                    Dette boksplot viser fordelingen af profit (kr) for fiske- og skaldyrsprodukter fordelt p√•: vinter, sommer, for√•r og efter√•r.
                    Medianen ligger nogenlunde ens p√• tv√¶rs af s√¶sonerne, hvilket tyder p√•, at indtjeningen er stabil gennem hele √•ret.
                    Variationen i profit er ogs√• ensartet, hvilket viser, at der ikke er store udsving mellem s√¶sonerne.
                    Der ses dog nogle f√• afvigelser:
                    * Sommer og for√•r har lidt flere produkter med h√∏j profit.
                    * Vinter har nogle lave outliers.
                    * Efter√•r og vinter har en lidt h√∏jere median end de andre.
                    Overordnet viser grafen, at profitten er j√¶vnt fordelt hen over √•ret, og at s√¶sonen ikke har en stor indflydelse p√• indtjeningen. Ekstreme v√¶rdier forekommer, men √¶ndrer ikke det generelle billede af stabil profit.
                    """)
    if view_option == "S√¶son":
        season = st.selectbox("V√¶lg s√¶son", ["Sommer", "For√•r", "Efter√•r", "Vinter"])
        if season == "Sommer":
            season_df = df[df["season_availability_Summer"] == 1]
        elif season == "For√•r":
            season_df = df[df["season_availability_Spring"] == 1]
        elif season == "Efter√•r":
            season_df = df[df["season_availability_Autumn"] == 1]
        else:
            season_df = df[df["season_availability_Winter"] == 1]

        # Plot
        fig, ax = plt.subplots(figsize=(12, 6))
        sns.boxplot(x="name", y="profit_kr", data=season_df, ax=ax)
        plt.xticks(rotation=90)
        plt.title(f"Profit pr. Produkt i {season}-s√¶sonen")
        st.pyplot(fig)

        

        # Table
        top10 = season_df[['name', 'price_kr', 'profit_kr', 'year']].copy()
        top10['year'] = top10['year'].astype(str)
        top10 = top10.sort_values(by='profit_kr', ascending=False).head(3)
        st.markdown("### De mest profitable produkter pr. p√•g√¶ldende s√¶son")
        st.dataframe(top10.reset_index(drop=True), use_container_width=True)

    elif view_option == "√Ör":
        year = st.selectbox("V√¶lg √•r", sorted(df["year"].unique()))
        year_df = df[df["year"] == year]

        # Plot
        fig, ax = plt.subplots(figsize=(12, 6))
        sns.boxplot(x="name", y="profit_kr", data=year_df, ax=ax)
        plt.xticks(rotation=90)
        plt.title(f"Profit pr. Produkt i √•r {year}")
        st.pyplot(fig)


        # Table
        top10 = year_df[['name', 'price_kr', 'profit_kr', 'year']].copy()
        top10['year'] = top10['year'].astype(str)
        top10 = top10.sort_values(by='profit_kr', ascending=False).head(3)
        st.markdown("### Top 3 mest profitable produkter pr. √•r")
        st.dataframe(top10.reset_index(drop=True), use_container_width=True)

                            
if selected == "Transportomkostninger":
    st.title("üì¶ Transportomkostninger gennem tiden")
    st.markdown("""
    I denne sektion kan man se hvordan transportomkostninger p√•virker fiske- og skaldyrspriser. 
    Dette giver indblik i, om dyr transport h√¶nger sammen med h√∏jere priser, og om dette har √¶ndret sig over tid.
    """)
    st.image("media/freight_charge_vs_price.png", caption="Transportomkostning vs Pris", width=800)
    st.markdown("""
                Diagrammet viser sammenh√¶ngen mellem transportomkostninger og prisen p√• fiske- og skaldyrsprodukter. 
                Der er ikke nogen tydelig tendens, da punkterne er spredt ud over hele grafen.
                Det tyder p√•, at transportomkostningen ikke har stor eller direkte betydning for prisen, og at andre faktorer sandsynligvis spiller en st√∏rre rolle.
                """)
    st.subheader("üìä Gennemsnitlig transportomkostning pr. √•r")

    avg_freight_per_year = df.groupby("year")["freight_charge_kr"].mean().reset_index()
    avg_freight_per_year["year"] = avg_freight_per_year["year"].astype(str)
    avg_freight_per_year.columns = ["√Ör", "Gennemsnitlig transportomkostning (kr)"]
    st.table(avg_freight_per_year)

if selected == "V√¶gtpris over tid":
    st.title("‚öñÔ∏è V√¶gtprisen p√• skalddyr og fisk over tid")
    st.markdown(""" 
        
    """)
    st.image("media/weight_vs_price.png", width=800)
    st.markdown(""" Diagrammet viser sammenh√¶ngen mellem v√¶gten p√• fiske- og skaldyrsprodukter og deres pris. 
                Generelt g√¶lder det, at jo mere produktet vejer, jo h√∏jere er prisen. 
                De fleste produkter f√∏lger denne tendens, selvom der er nogle f√•, der skiller sig ud
                """)
       # Select year
    years = sorted(df['year'].unique())
    selected_year = st.selectbox("V√¶lg √•r", years)

    # Filter by year
    year_df = df[df["year"] == selected_year].copy()

    # Reconstruct 'type' from one-hot encoding (if needed)
    if "type_shellfish" in year_df.columns and "type_fish" in year_df.columns:
        year_df["type"] = year_df[["type_shellfish", "type_fish"]].idxmax(axis=1).str.replace("type_", "")
    else:
        st.error("Kolonnerne 'type_shellfish' og 'type_fish' mangler i datas√¶ttet.")
        st.stop()

    # Calculate weight price
    year_df["v√¶gtpris_kr_pr_g"] = year_df["price_kr"] / year_df["weight_g"]

    # Group and calculate average
    avg_weight_price = year_df.groupby("type")["v√¶gtpris_kr_pr_g"].mean().reset_index()
    avg_weight_price.columns = ["Type", "Gennemsnitlig v√¶gtpris (kr/g)"]

    # Show table
    st.markdown(f"### Gennemsnitlig v√¶gtpris for {selected_year}")
    st.dataframe(avg_weight_price, use_container_width=True)